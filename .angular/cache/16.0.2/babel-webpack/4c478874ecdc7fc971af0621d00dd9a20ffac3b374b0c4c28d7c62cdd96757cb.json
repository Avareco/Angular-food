{"ast":null,"code":"import { setCart } from \"./cart.actions\";\nimport { catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nclass CartService {\n  constructor(http, store) {\n    this.http = http;\n    this.store = store;\n  }\n  loadCart() {\n    this.http.get('http://localhost:3000/cart').pipe(catchError(error => {\n      // Handle the error here\n      console.error('An error occurred:', error);\n      // You can throw a custom error or return any default value here\n      // For example, throwing a custom error\n      alert('An error occurred while loading cart.');\n      return throwError('An error occurred while loading cart.');\n    })).subscribe(resp => {\n      this.store.dispatch(setCart({\n        value: resp\n      }));\n    });\n  }\n  updateCart(cart) {\n    this.http.put('http://localhost:3000/cart', cart).pipe(catchError(error => {\n      alert(error);\n      return 'An error occurred while updating cart.';\n    }));\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});\nexport { CartService };","map":{"version":3,"names":["setCart","catchError","throwError","CartService","constructor","http","store","loadCart","get","pipe","error","console","alert","subscribe","resp","dispatch","value","updateCart","cart","put","i0","ɵɵinject","i1","HttpClient","i2","Store","factory","ɵfac","providedIn"],"sources":["C:\\Users\\andrii.yakovliev\\Desktop\\projects\\2024\\udemy\\ANGULAR_COURSE\\01-starting-setup-standalone\\src\\app\\store\\cart\\cart.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Store} from \"@ngrx/store\";\r\nimport {ICart, ICartStore} from \"./cart.reducer\";\r\nimport {setCart} from \"./cart.actions\";\r\nimport {catchError, throwError} from \"rxjs\";\r\nimport {error} from \"@angular/compiler-cli/src/transformers/util\";\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class CartService {\r\n  constructor(private http: HttpClient, private store: Store<ICartStore>) {\r\n  }\r\n\r\n\r\n  loadCart() {\r\n    this.http.get<ICart[]>('http://localhost:3000/cart').pipe(\r\n      catchError((error) => {\r\n        // Handle the error here\r\n        console.error('An error occurred:', error);\r\n        // You can throw a custom error or return any default value here\r\n        // For example, throwing a custom error\r\n        alert('An error occurred while loading cart.');\r\n        return throwError('An error occurred while loading cart.');\r\n      })\r\n    ).subscribe((resp) => {\r\n      this.store.dispatch(setCart({value: resp}));\r\n    });\r\n  }\r\n\r\n  updateCart(cart: ICart[]) {\r\n    this.http.put<ICart[]>('http://localhost:3000/cart', cart).pipe(\r\n      catchError((error) => {\r\n        alert(error)\r\n        return 'An error occurred while updating cart.';\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAIA,SAAQA,OAAO,QAAO,gBAAgB;AACtC,SAAQC,UAAU,EAAEC,UAAU,QAAO,MAAM;;;;AAG3C,MACaC,WAAW;EACtBC,YAAoBC,IAAgB,EAAUC,KAAwB;IAAlD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,KAAK,GAALA,KAAK;EACnD;EAGAC,QAAQA,CAAA;IACN,IAAI,CAACF,IAAI,CAACG,GAAG,CAAU,4BAA4B,CAAC,CAACC,IAAI,CACvDR,UAAU,CAAES,KAAK,IAAI;MACnB;MACAC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C;MACA;MACAE,KAAK,CAAC,uCAAuC,CAAC;MAC9C,OAAOV,UAAU,CAAC,uCAAuC,CAAC;IAC5D,CAAC,CAAC,CACH,CAACW,SAAS,CAAEC,IAAI,IAAI;MACnB,IAAI,CAACR,KAAK,CAACS,QAAQ,CAACf,OAAO,CAAC;QAACgB,KAAK,EAAEF;MAAI,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC;EACJ;EAEAG,UAAUA,CAACC,IAAa;IACtB,IAAI,CAACb,IAAI,CAACc,GAAG,CAAU,4BAA4B,EAAED,IAAI,CAAC,CAACT,IAAI,CAC7DR,UAAU,CAAES,KAAK,IAAI;MACnBE,KAAK,CAACF,KAAK,CAAC;MACZ,OAAO,wCAAwC;IACjD,CAAC,CAAC,CACH;EACH;;AA3BWP,WAAW,C;mBAAXA,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,KAAA;AAAA;AAAXtB,WAAW,C;SAAXA,WAAW;EAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;EAAAC,UAAA,EADC;AAAM;SAClBzB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}