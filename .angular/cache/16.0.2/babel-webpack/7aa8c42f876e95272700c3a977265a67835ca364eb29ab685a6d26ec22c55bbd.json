{"ast":null,"code":"import { setCart } from \"./cart.actions\";\nimport { catchError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nclass CartService {\n  constructor(http, store) {\n    this.http = http;\n    this.store = store;\n  }\n  loadCart() {\n    this.http.get('http://localhost:3000/cart').subscribe(resp => {\n      this.store.dispatch(setCart({\n        value: resp\n      }));\n    }, error => alert(error));\n  }\n  updateCart(cart) {\n    this.http.put('http://localhost:3000/cart', cart).pipe(catchError(error => {\n      alert(error);\n      return 'An error occurred while updating cart.';\n    }));\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});\nexport { CartService };","map":{"version":3,"names":["setCart","catchError","CartService","constructor","http","store","loadCart","get","subscribe","resp","dispatch","value","error","alert","updateCart","cart","put","pipe","i0","ɵɵinject","i1","HttpClient","i2","Store","factory","ɵfac","providedIn"],"sources":["C:\\Users\\andrii.yakovliev\\Desktop\\projects\\2024\\udemy\\ANGULAR_COURSE\\01-starting-setup-standalone\\src\\app\\store\\cart\\cart.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Store} from \"@ngrx/store\";\r\nimport {ICart, ICartStore} from \"./cart.reducer\";\r\nimport {setCart} from \"./cart.actions\";\r\nimport {catchError, throwError} from \"rxjs\";\r\nimport {error} from \"@angular/compiler-cli/src/transformers/util\";\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class CartService {\r\n  constructor(private http: HttpClient, private store: Store<ICartStore>) {\r\n  }\r\n\r\n  loadCart() {\r\n    this.http.get<ICart[]>('http://localhost:3000/cart').subscribe((resp) => {\r\n        this.store.dispatch(setCart({value: resp}))\r\n      },\r\n      (error: string) => alert(error))\r\n  }\r\n\r\n  updateCart(cart: ICart[]) {\r\n    this.http.put<ICart[]>('http://localhost:3000/cart', cart).pipe(\r\n      catchError((error) => {\r\n        alert(error)\r\n        return 'An error occurred while updating cart.';\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAIA,SAAQA,OAAO,QAAO,gBAAgB;AACtC,SAAQC,UAAU,QAAmB,MAAM;;;;AAG3C,MACaC,WAAW;EACtBC,YAAoBC,IAAgB,EAAUC,KAAwB;IAAlD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,KAAK,GAALA,KAAK;EACnD;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACF,IAAI,CAACG,GAAG,CAAU,4BAA4B,CAAC,CAACC,SAAS,CAAEC,IAAI,IAAI;MACpE,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACV,OAAO,CAAC;QAACW,KAAK,EAAEF;MAAI,CAAC,CAAC,CAAC;IAC7C,CAAC,EACAG,KAAa,IAAKC,KAAK,CAACD,KAAK,CAAC,CAAC;EACpC;EAEAE,UAAUA,CAACC,IAAa;IACtB,IAAI,CAACX,IAAI,CAACY,GAAG,CAAU,4BAA4B,EAAED,IAAI,CAAC,CAACE,IAAI,CAC7DhB,UAAU,CAAEW,KAAK,IAAI;MACnBC,KAAK,CAACD,KAAK,CAAC;MACZ,OAAO,wCAAwC;IACjD,CAAC,CAAC,CACH;EACH;;AAlBWV,WAAW,C;mBAAXA,WAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,KAAA;AAAA;AAAXrB,WAAW,C;SAAXA,WAAW;EAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;EAAAC,UAAA,EADC;AAAM;SAClBxB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}